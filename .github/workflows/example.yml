# This is a basic workflow to help you get started with Actions

name: Self-service Maintenance Page

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev, test, qa or prod)'
        required: true
        default: 'dev'
      application:
        description: 'Application (crm or cust360)'
        required: true
      on_off_maintenance_page:
        description: 'Turn maintenance page on/off (on or off)'
        required: true
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Check the Environment variable is valid
        run: |
          if ! [[ ${{ github.event.inputs.environment }} =~ ^(prod|qa|test|dev)$ ]]; then
            echo "Please enter a valid Environment (dev, test, qa or prod) name. The value you entered, ${{ github.event.inputs.environment }} is not valid."
            exit 1
          fi
          
      - name: Check the Application variable is valid
        run: |
          if ! [[ ${{ github.event.inputs.application }} =~ ^(crm|cust360)$ ]]; then
            echo "Please enter a valid Application (crm OR cust360) name. The value you entered, ${{ github.event.inputs.application }} is not valid."
            exit 1
          fi
       
      - name: Check the Maintenance page variable is valid
        run: |
          if ! [[ ${{ github.event.inputs.on_off_maintenance_page }} =~ ^(on|off)$ ]]; then
            echo "Please enter a valid Maintenance page (on OR off) option. The value you entered, ${{ github.event.inputs.on_off_maintenance_page }} is not valid."
            exit 1
          fi
      
      # TODO: These blocks are ugly, but variable interpolation isn't working as expected.
      - if: github.event.inputs.environment == 'prod'
        name: Configure AWS ${{ github.event.inputs.environment }} creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          
      - if: github.event.inputs.environment == 'qa'
        name: Configure AWS ${{ github.event.inputs.environment }} creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.QA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.QA_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          
      - if: github.event.inputs.environment == 'test'
        name: Configure AWS ${{ github.event.inputs.environment }} creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
      
      - if: github.event.inputs.environment == 'dev' 
        name: Configure AWS ${{ github.event.inputs.environment }} creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          
      - name: Create variables
        run: |
          echo ENV_NAME=${{ github.event.inputs.environment }} >> $GITHUB_ENV
          echo APP_NAME=${{ github.event.inputs.application }} >> $GITHUB_ENV
          echo MAINT_ONOFF=${{ github.event.inputs.on_off_maintenance_page }} >> $GITHUB_ENV
      
      - name: Toggle maintenance page
        run: |
          declare -A CLOUDFRONT_DIST_ID=( ["prod_crm"]="E1BVEKRQF20RNI" \
                                          ["prod_cust360"]="E1BVEKRQF20RNI" \
                                          ["qa_crm"]="TBC" ["qa_cust360"]="TBC" \
                                          ["test_crm"]="TBC" \
                                          ["test_cust360"]="TBC" \
                                          ["dev_crm"]="TBC" \
                                          ["dev_cust360"]="TBC" \
                                        )
                                          
          declare -A PATH_PATTERN_OPT=( ["on"]="/*.*/" \
                                        ["off"]="/disabled/" \
                                      )
                                           
          echo "ENVIRONMENT: ${ENV_NAME}"
          echo "APPLICATION: ${APP_NAME}"
          echo "Cloudfront Distribution ID: ${CLOUDFRONT_DIST_ID[${ENV_NAME}_${APP_NAME}]}"
          
          echo "Get Cloudfront distrubution config..."
          PAYLOAD=`aws cloudfront get-distribution-config --id ${CLOUDFRONT_DIST_ID[${ENV_NAME}_${APP_NAME}]}`

          echo "Set the ETag variable..."
          ETAG=`echo ${PAYLOAD} | jq -r '.ETag'`
          echo "ETag set as ${ETAG}..."
          
          PATHPATTERN=${PATH_PATTERN_OPT[$MAINT_ONOFF]}
          echo "Update the configuration payload..."
          PAYLOAD=`echo ${PAYLOAD} | jq 'del(.ETag)' | \
                                     jq '.DistributionConfig' | \
                                     jq --arg PATHPATTERN $PATHPATTERN '.CacheBehaviors.Items[0].PathPattern = $PATHPATTERN'`
          cat $PAYLOAD
      
                            
      - name: Temp exit
        run: | 
          echo "Lets exit here as no need to run the rest"
          exit 1
          




